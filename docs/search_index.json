[
["index.html", "Assembly of ecological communities: some theoretical explorations Preliminaries Goals Computing Questions and answers", " Assembly of ecological communities: some theoretical explorations Stefano Allesina 2020-11-29 Preliminaries Goals Brief overview of the history of the study of ecological assembly List the main issues that make the development of a theory of assembly difficult Make assumptions that remove the main obstacles Study top-down assembly, and show that in this way any endpoint of assembly is reachable Study bottom-up assembly, and the notion of an assembly graph Prove equivalence between bottom-up and top-down assembly for certain Lotka-Volterra models Outline next steps in the development of a theory of assembly Computing All the figures are generate at runtime, using R code that can be found in this GitHub repository. Please make sure that the following libraries are installed: deSolve for integration of differential equations tidyverse for data manipulation and plotting knitr to compile this document igraph for visualizing networks Questions and answers If you have a question that prevents you from following the lecture, please unmute yourself and ask the question—other students are likely to have the same problem! If you are asking a question out of curiosity, or that can be discussed later, please put it in the chat. I will keep the last few minutes of the lecture for Q&amp;A. "],
["intro.html", "Lecture 1 Introduction 1.1 Generalized Lotka-Volterra model 1.2 What makes the study of assembly difficult? 1.3 Ecological assembly without tears 1.4 Top-down and bottom-up assembly 1.5 Modeling invasions 1.6 Invasions in multispecies communities 1.7 Lyapunov stability and saturated equilibria", " Lecture 1 Introduction We call ecological assembly the process by which ecological communities are built by the interplay of invasions (increasing community “richness”) and extinctions (decreasing it). The typical setting for an assembly model is one in which a large (possibly infinite) pool of species are available (e.g., in a “mainland”), and every so often individuals from the species’ pool enter a local habitat (island, patch, etc.), at which point they might either grow (invasion, establishment, etc.), or go extinct. In either case, the local community might respond to the invader—for example, the invader could send some of the local populations extinct, or shift the community from one state to another. The idea of assembly was first introduced in ecology by the pioneers of “succession”. For example, in 1899 Henry Chandler Cowles studied the vegetation development in the Indiana Dunes—sand dunes are first colonized by “pioneer” species of plants, which are then overgrown by different vegetation in older dunes. Because dunes are regularly disrupted by wind, one could make a “space-for-time” substitution and reconstruct the development of the vegetation as a “chronosequence”. Importantly, Cowles (and then Clements) held the view that succession would be a strongly ordered, “determinisitc” process by which communities tended to a certain “climax” state. In the 1920s, Henry Gleason challenged this view, advocating for a much greater role for chance. Another important piece of the puzzle was provided by the work of Jared Diamond who, while studying avian assemblages in New Guinea, proposed that certain species assemblages would be “forbidden” (due to competition)—by observing several instances of assembly (in the different islands), one could guess the rules of the assembly game. Diamond’s work sparked decades of intense debate, bringing a focus on the role of null models in ecology (are the observed patterns due to chance or necessity?), with especially cogent critiques brought forward by Simberloff, Connor and Gotelli (see for example Gotelli and Graves (1996)). In the early 2000s, the focus changed decisively and became centered on the difference between “neutrality” (i.e., where species distribution are driven by stochastic fluctuations, Hubbell (2001)) and “niche” (i.e., driven by species interactions—or rather their avoidance). Finally, the budding field of “community phylogenetics” (Cadotte and Davies (2016)) is centered on relating these concepts with data stemming from phylogenetic trees. Here, we step back and reconsider basic models of ecological assembly in the style for example of Drake (1991), Law and Morton (1996), and Morton et al. (1996). 1.1 Generalized Lotka-Volterra model For our explorations, we will use what is arguably the simplest model for the dynamics of an ecological community, the Generalized Lotka-Volterra model. We can write the Generalized Lotka-Volterra model in a compact form as: \\[ \\dfrac{dx(t)}{dt} = D(x(t))(r + A x(t)) \\] where \\(x(t)\\) is a (column) vector of length \\(n\\) containing the densities of all populations \\(1, \\ldots, n\\) at time \\(t\\), \\(r\\) is a vector of “intrinsic growth rates” (or death rates, when negative), measuring the growth (decline) of population \\(i\\) when grown alone at low density, and \\(A\\) is a \\(n \\times n\\) matrix of interaction coefficients. We use \\(D(x)\\) to denote the diagonal matrix with \\(x\\) on the diagonal. For a single species, the model can yield only a limited number of outcomes—the species can grow exponentially, decay exponentially, or reach an equilibrium. When we include two or more species, we can observe cycles, and with three or more species we can find chaotic dynamics. source(&quot;code/general_code.R&quot;) # load interesting parameters load(&quot;code/four_spp_cycle.RData&quot;) A &lt;- limit_cycle_4spp$A r &lt;- limit_cycle_4spp$r set.seed(1) # for reproducibility dynamics &lt;- GLV_dynamics(A = A, r = r, maxtime = 150) plot_dynamics(dynamics) 1.1.1 Coexistence equilibrium For any instance of the model, we can look for stationary points (equilibria). If the matrix \\(A\\) is not singular, then we can look for a solution of \\(r + Ax = 0\\) that has positive components (called a feasible equilibrium). If such point exists, it is unique and is the solution of \\(Ax^\\star = -r\\), \\(x^\\star = -A^{-1}r\\). # find feasible equilibrium for the example above solve(A, -r) [1] 1.8722239 1.5603128 2.4236325 0.4654487 Suppose that the GLV has no feasible equilibrium. Then all trajectories (if bounded; some could grow to infinity) reach the boundary of \\(\\mathbb R^n_{0+}\\). Practically, this means that to ensure coexistence of all species, it is necessary to have an equilibrium in the interior \\(\\mathbb R^n_{+}\\). For a proof, see Theorem 5.2.1 in Hofbauer and Sigmund (1998). 1.1.2 Local Stability of the coexistence equilibrium Suppose that a feasible equilibrium \\(x^\\star\\) exists. For the GLV model, the Jacobian is easy to compute: \\[ J_{ij} = \\frac{\\partial f_i}{\\partial x_j} = A_{ij} x_i \\] and \\[ J_{ii} = \\frac{\\partial f_i}{\\partial x_i} = r_i + \\sum_j A_{ij} x_j + A_{ii} x_i \\] At equilibrium \\(r_i + \\sum_j A_{ij} x_j = 0\\), and therefore: \\[ M = \\left. {J} \\right|_{ {x}^\\star} = D(x^\\star)A \\] If the eigenvalues of \\(M\\) have all negative real part, then \\(x^\\star\\) is locally asymptotically stable. # build the community matrix x_star &lt;- solve(A, -r) M &lt;- diag(x_star) %*% A eigen(M, only.values = TRUE)$values %&gt;% round(2) [1] -2.40+0.00i 0.37+2.06i 0.37-2.06i -0.61+0.00i 1.1.3 The equilibrium is the time-average Suppose that \\(x(t)\\) has a periodic orbit of period \\(T\\) (i.e., we assume \\(x(0) = x(T)\\)). Further, assume that the GLV has a feasible, interior equilibrium \\(x^\\star\\). We want to calculate the average density for each species: \\[ \\frac{1}{T} \\int_0^T x(t) dt \\] First, we assume that \\(x(t) &gt; 0\\) and write the dynamics of its logarithm: \\[ \\dfrac{d \\log(x_i(t))}{dt} = \\dfrac{1}{x_i(t)}\\dfrac{d x_i(t)}{dt} = r_i + \\sum_j A_{ij} x_j(t) \\] In vector form: \\[ \\dfrac{d \\log x(t)}{d t} = r + A x(t) \\] Compute the average on both sides: \\[ \\frac{1}{T}\\int_0^T \\frac{d \\log(x(t))}{dt} dt= \\frac{1}{T}\\int_0^T \\left(r + Ax \\right) dt \\] yielding: \\[ \\frac{1}{T}(\\log(x(T)) - \\log(x(0))) = 0 = r + A \\left( \\frac{1}{T} \\int_0^T x(t) dt \\right) \\] Note that the l.h.s. is zero because \\(x(0) = x(T)\\). Multiplying by the matrix inverse and rearranging: \\[ -A^{-1} r = x^\\star = \\frac{1}{T} \\int_0^T x(t) dt \\] showing that the average density is in fact the equilibrium. With a similar argument, one can prove that if the trajectory stays in a compact space (i.e., in case of chaotic attractors), then long-time average is still \\(x^\\star\\). dynamics$ts %&gt;% filter(time &gt; 50) %&gt;% group_by(species) %&gt;% summarize(density = mean(density)) %&gt;% select(density) %&gt;% t() %&gt;% as.numeric() [1] 1.8681154 1.5585202 2.4212556 0.4621904 x_star [1] 1.8722239 1.5603128 2.4236325 0.4654487 1.1.4 Lyapunov diagonal stability and global stability Suppose that there is a positive diagonal matrix \\(C\\) such that \\(C A + A^T C\\) is negative definite (i.e., has only negative eigenvalues; the eigenvalues are real because the matrix is symmetric). Then \\(A\\) is Lyapunov-diagonally stable. If this is the case, then \\(A\\) is stable, and any \\(D A\\) with \\(D\\) positive is also stable (called \\(D-\\)stability). Further, suppose that the GLV system with parameters \\(A\\) and \\(r\\) has a feasible equilibrium point \\(x^\\star\\). Then the function: \\[ V(x(t)) = 1^T C \\left( x(t) -x^\\star -x^\\star \\cdot \\log (x(t) / x^\\star)\\right) \\] is a Lyapunov function for the GLV system. It is clear that \\(V(x(t))\\) is positive everywhere in the positive orthant besides at equilibrium. Then, we need to show that the function decreases along the trajectories of the system. To prove this point, we start from \\(r = -A x^\\star\\). Substituting, we can write the GLV system as \\(dx(t)/dt = D(x)A(x - x^\\star)\\); similarly, we can write \\(d \\log x(t)/dt = A(x - x^\\star)\\). Taking the derivative of \\(V\\) with respect to time: \\[ \\begin{aligned} \\frac{d V(x(t))}{dt} &amp;= 1^T C \\left(\\frac{d x(t)}{dt} - D(x^\\star) \\frac{d \\log x(t)}{dt} \\right)\\\\ &amp;= 1^T C \\left(D(x)(A (x - x^\\star) - D(x^\\star) A (x - x^\\star) \\right)\\\\ &amp;= 1^T C \\left(D(x - x^\\star) A (x - x^\\star) \\right)\\\\ &amp;= 1^T \\left(D(x - x^\\star) C A (x - x^\\star) \\right)\\\\ &amp;= (x - x^\\star)^T CA (x - x^\\star)\\\\ &amp;= \\frac{1}{2}(x - x^\\star)^T (CA + A^T C) (x - x^\\star)\\\\ \\end{aligned} \\] A matrix \\(B\\) is negative definite if \\(y^T B y &lt; 0\\) for all \\(y \\neq 0\\). As such, if \\(C A + A^T C\\), then \\(\\frac{d V(x(t))}{dt} \\leq 0\\), i.e., will decrease in time (starting from any positive \\(x(0)\\)) until the equilibrium \\(x^\\star\\) is reached. The results above show that if \\(A\\) is Lyapunov diagonally-stable and a feasible equilibrium \\(x^\\star\\) exists, then all trajectories starting at a positive density will converge to the equilibrium. This property is often used to prove global stability. 1.2 What makes the study of assembly difficult? There are three main complications that stand in the way of the development of simple theories for ecological assembly (taken from Serván and Allesina (2020)): Invasion rates. We have a timescale for the local dynamics, and a timescale for invasions, and the time at which the first species goes extinct after an invasion influences the effect of subsequent invasions. The simplest way to think of this is to have a “rock-paper-scissors” community. Suppose that our island contains only “rock”, and that “paper” enters the system—if we wait for long enough, it will displace rock; if before rock goes extinct, “scissors” invades, we can recover the full three-species community; if instead scissors arrives when rock is extinct, then it will displace paper. As such, if the speed at which the dynamics of the local community proceed are slow enough compared to the rate of invasion, we have that several species can invade before the community has reached its asymptotic configuration. At the extreme where local dynamics are fast compared to the rate of invasion, we have that each invader finds the local community at its asymptotic state; as the invasion rate increases, the system approaches a point where all the species enter the system before any extinction takes place. Increasing the invasion rate even further would result in an open system with constant immigration. Invasion size. Consider the two-species competitive Lotka-Volterra model with preemptive competition, and suppose that initially we have species \\(x_1\\) resting at its carrying capacity, i.e., the state of the system is \\(\\{x_1\\}\\). If \\(x_2\\) invades with sufficiently low density, we find \\(\\{x_1, x_2\\} \\to \\{x_1\\}\\); on the other hand, if \\(x_2\\) has sufficiently high density, we can cross the separatrix in the phase plane, leading to \\(\\{x_1, x_2\\} \\to \\{x_2\\}\\). This simple example shows that the density at which the invader enters the system can alter the outcome of the dynamics. Invasion timing. When the local community coexists at a non-fixed point attractor, the fate of the invader could be very different depending on when it is introduced. For example, a predator requiring its prey to be above a certain level would not be able to invade an oscillating system whenever prey are at low abundance, but would start growing if the invasion happened at a time when prey were abundant. 1.3 Ecological assembly without tears We make three main assumptions, which remove the difficulties above while leaving the model interesting to study: Invasion events are rare. We assume that the invasion rate is low enough such that, after an invasion, the local community has sufficient time to reach its asymptotic configuration before the next invader arrives. In other words, we consider cases in which local dynamics operates at a much faster rate than invasions. Note that this choice precludes certain dynamics; for example, under these stringent conditions the rock-paper-scissors community described above would never reach the three-species configuration. While this is a strong requirement, it corresponds to assumptions routinely made in the study of population genetics, and in invasion analysis. Invaders arrive at low abundance. We assume that the density of the invader is low enough so that intraspecific effects are negligible at the time of invasion (again, as routinely assumed in invasion analysis). Under this assumption, the assembly of the Lotka-Volterra preemptive competition model would have two possible final states, corresponding to each species in isolation. Note also that whenever the invader can enter the system only at low abundance, the local stability of an attractor (i.e. the community at the attractor is resistant to small perturbations caused by changes in abundance of any of the species in the pool) is sufficient to make it a possible outcome of the assembly process. Fixed-point dynamics. Finally, we consider models in which the asymptotic state of the local community is a feasible, stable equilibrium, thereby sidestepping the difficulty stemming from the timing of invasion. For example, the Generalized Lotka-Volterra model with a symmetric matrix of interaction \\(A\\) yields only fixed-point dynamics. 1.4 Top-down and bottom-up assembly We distinguish between two extreme cases of assembly. In top-down assembly, all species enter the system (at arbitrary densities) at the same time; assembly then is simply the pruning of some of the species through the dynamics. At the other extreme, we find bottom-up assembly, in which species enter the system one at a time. Our second lecture will focus on top-down assembly, and the third on bottom-up assembly. 1.5 Modeling invasions Imagine starting with a bare environment, and introducing the first species. If the species can grow in the new environment, it will establish, and if not, it will go extinct. Mathematically, we assume that new species are introduced at very low abundance, so that they do not experience self-limitation due to crowding, and that invasion are spaced in time so that the dynamics can play out before the next invasion happens. For example, consider the GLV model, and the case of the first species entering the system, and write the equation for the per-capita growth rate: \\[ \\dfrac{1}{x_i(t)}\\dfrac{dx_i(t)}{dt} = r_i + A_{ii} x_i(t) \\] If \\(x_i(0) \\ll 1\\), we can set \\(A_{ii} x_i(0) \\approx 0\\), obtaining \\[ \\dfrac{1}{x_i(t)}\\dfrac{dx_i(t)}{dt} \\approx r_i \\] That is, the species will establish if it has a positive growth rate in the new environment. Suppose that this is the case: then species \\(i\\) will grow to its equilibrium abundance \\(x_i^\\star = -r_i / A_{ii}\\). Now add a second species. Its initial per-capita growth rate is going to be: \\[ \\dfrac{1}{x_j(t)}\\dfrac{dx_j(t)}{dt} = r_j + \\sum_k A_{jk} x_k(t) \\approx r_j + A_{ji}x_i^\\star \\] Species \\(j\\) can therefore grow when rare if \\(r_j + A_{ji}x_i^\\star &gt; 0\\), i.e., \\(r_j &gt; -A_{ji}x_i^\\star\\). We call this type of inequality an “invasion criterion”. If the species \\(j\\) can grow when rare, in general, it could a) grow initially, but then go extinct; b) displace species \\(i\\), sending it to extinction; c) coexist with species \\(i\\). By reiterating invasions with different species, we can assemble a large ecological community. 1.6 Invasions in multispecies communities Now consider a pool of species (e.g., a metacommunity/mainland) and an environment (e.g., a local habitat/island) in which some of the species are present, and coexisting at an equilibrium. We have \\(n\\) species in the pool, and \\(k\\) species in the habitat/island. We want to write conditions for the invasibility of the equilibrium. To this end, we can re-arrange the rows and columns of \\(A\\), and the elements of \\(r\\) to obtain two blocks: one for the \\(k\\) species already in the community, and one for the \\(n-k\\) potential invaders. The fixed point \\(\\bar{x}\\) can be written as: \\[ \\bar{x} = \\left(\\begin{array}{l} x^{(k)} \\\\ 0^{(n-k)} \\end{array} \\right) \\] where \\(x^{(k)}\\) contains the density of the coexisting species. Similarly, the growth rates are \\[ r = \\left(\\begin{array}{l} r^{(k)} \\\\ r^{(n-k)} \\end{array} \\right) \\] and the interaction matrix \\[ A = \\begin{pmatrix} A^{(k,k)} &amp; A^{(k, n- k)}\\\\ A^{(n-k,k)} &amp; A^{(n-k, n- k)}\\\\ \\end{pmatrix} \\] where each block \\(A^{(a,b)}\\) contains the effects of the species in set \\(b\\) on the growth of the species in \\(a\\). For feasibility we need: \\[ x^{(k)} = -\\left(A^{(k,k)} \\right)^{-1}r^{(k)} &gt; 0 \\] Now we want to write the condition for the non-invasibility of the resident community by the other species in the metacommunity. For each species in \\((n-k)\\), we need to have a negative growth rate when invading: \\[ r^{(n-k)} + A^{(n-k,k)}x^{(k)} &lt; 0 \\] an equilibrium \\(\\bar{x}\\) for which a) the \\(x^{(k)}\\) is feasible and stable (when considering only the species in \\(k\\)) and b) no other species can invade when rare is called the feasible, stable, non-invasible solution or the saturated equilibrium. 1.7 Lyapunov stability and saturated equilibria We have seen in previous section that, whenever there exists a matrix \\(C\\) such that \\(CA + A^T C\\) is negative definite and we have a feasible equilibrium \\(x^\\star\\) then the equilibrium is globally stable. Now we consider the case in which a feasible equilibrium does not exist. However, we can prove that a saturated equilibrium exists and is unique: we have an equilibrium \\(\\bar{x}\\) in which some components are positive and some are zero such that \\(k\\) species coexist at a globally stable equilibrium, and the remaining \\((n-k)\\) species cannot invade it. Following Hofbauer and Sigmund (1998) (section 15.3), we write: \\[ V(x) = -\\sum_i c_i (\\bar{x}_i \\log x_i - x_i) \\] yielding: \\[ \\begin{aligned} \\dfrac{dV(x)}{dt} &amp;= -\\sum_i c_i \\left(\\bar{x}_i \\frac{d \\log x_i}{dt} - \\frac{d x_i}{dt} \\right) \\\\ &amp;= -\\sum_i c_i \\left( \\bar{x}_i - x_i \\right) \\left( r_i + \\sum_j A_{ij} x_j \\right) \\\\ &amp;= -\\sum_i c_i \\left( \\bar{x}_i - x_i \\right) \\left( r_i + \\sum_j A_{ij} (x_j - \\bar{x}_j) + \\sum_j A_{ij} \\bar{x}_j \\right) \\\\ &amp;= \\sum_{i,j} \\left( \\bar{x}_i - x_i \\right) c_i A_{ij} \\left( \\bar{x}_j - x_j \\right) + \\sum_i c_i \\left( \\bar{x}_i - x_i \\right) \\left(r_i + \\sum_j A_{ij} \\bar{x}_j \\right) \\end{aligned} \\] The first term is negative for all \\(x \\neq \\bar{x}\\), and is zero at the saturated equilibrium point. The second term is zero for all \\(\\bar{x}_i &gt; 0\\): \\(r_i + \\sum_j A_{ij} \\bar{x}_j = 0\\), given that \\(\\bar{x}\\) is an equilibrium for the species at positive density; for the remaining species (for which \\(\\bar{x}_i = 0\\)), this amounts to the invasion criterion above, and must therefore be negative. As such \\(V(x)\\) is a Lyapunov function for the system, assuming negative values everywhere but at \\(\\bar{x}\\). References "],
["top-down-assembly.html", "Lecture 2 Top-down assembly 2.1 A trivial case 2.2 Simulating final composition 2.3 A random zoo 2.4 Assembly and saturated equilibrium 2.5 Network spandrels", " Lecture 2 Top-down assembly To begin our explorations of assembly, we consider the case in which all species are introduced in the habitat at the same time, and at arbitrary initial densities. Here we investigate the simplest case in which dynamics are given by the GLV model, \\(A\\) is symmetric and stable (and therefore Lyapunov Diagonally stable) matrix with random coefficients, and \\(r\\) is a vector of growth rates with random coefficients. For simplicity, we take the off-diagonal elements of \\(A\\) and the growth rates from a normal distribution centered at zero (the same would be found for any distribution symmetric about zero). This case was studied by Serván et al. (2018). First, we are going to consider a trivial case, then simulate a more complex one, and finally outline the proof in Serván et al. (2018). 2.1 A trivial case Suppose that the growth rates are drawn from a normal distribution centered at zero, and that the matrix \\(A\\) is diagonal and stable (i.e., species do not interact with each other; each species is self regulating). As such, a species will persist if and only if \\(r_i &gt; 0\\). If we draw the growth rates from any distribution centered at zero, then the probability of having a positive growth rate is \\(1/2\\). Therefore, the number of coexisting species will follow the binomial distribution with parameters \\(n\\) and \\(1/2\\). 2.2 Simulating final composition Now, let’s simulate cases in which species do interact with each other. First, we load the functions we’ve written before: # this file contains functions to integrate GLV dynamics # and plot the results source(&quot;code/general_code.R&quot;) And then write functions to give us a (barely) stable, symmetric matrix \\(A\\), and random growth rates: # function to build symmetric, Lyapunov Diagonally-stable matrix build_LDstable &lt;- function(n){ A &lt;- matrix(0, n, n) A[upper.tri(A)] &lt;- rnorm(n * (n - 1) / 2) # make symmetric A &lt;- A + t(A) # now find the largest eigenvalue l1A &lt;- max(eigen(A, only.values = TRUE, symmetric = TRUE)$values) if (l1A &gt; 0){ # set the diagonal to make it stable diag(A) &lt;- diag(A) - l1A - 0.01 } return(A) } # function to get random growth rates build_randomr &lt;- function(n){ return(rnorm(n)) } Now, we build a random system with seven species, and integrate the dynamics: set.seed(5) # for reproducibility n &lt;- 7 A &lt;- build_LDstable(n) r &lt;- build_randomr(n) x0 &lt;- runif(n) out &lt;- GLV_dynamics(z0 = x0, A = A, r = r, maxtime = 25, bytime = 0.1) show(plot_dynamics(out)) knitr::kable( out$ts %&gt;% filter(out$ts$time == max(out$ts$time)) %&gt;% select(-time) ) species density x1 0.4290121 x2 0.2761340 x3 0.0000000 x4 0.4021960 x5 0.0000000 x6 0.6452999 x7 0.5776737 As you can see, in this case, two species (3 and 5) go extinct, while the other ones reach a feasible equilibrium. Let’s try to start the system with species 3 and 5 at high abundance, to show that the equilibrium is indeed globally stable: x0[3] &lt;- 10 x0[5] &lt;- 10 out &lt;- GLV_dynamics(z0 = x0, A = A, r = r, maxtime = 25, bytime = 0.1) show(plot_dynamics(out)) knitr::kable( out$ts %&gt;% filter(out$ts$time == max(out$ts$time)) %&gt;% select(-time) ) species density x1 0.4291312 x2 0.2759277 x3 0.0000000 x4 0.4020638 x5 0.0000000 x6 0.6454349 x7 0.5777422 As you can see, the system still goes to the same equilibrium, with 3 and 5 extinct. Turns out, for this type of system, one does not even need to integrate dynamics: the Lemke–Howson algorithm can be adapted to solve the problem efficiently (Serván et al. 2018). I have coded up the algorithm already, and you can load the function get_final_composition(A, r) by typing: source(&quot;code/L-H.R&quot;) get_final_composition(A, r) # use LH instead of integrating dynamics [1] 0.4290300 0.2761030 0.0000000 0.4021761 0.0000000 0.6453202 0.5776840 2.3 A random zoo In the case above, 5 species persisted. We can ask how many species will coexist in general under this parametrization. A good metaphor is that of the random zoo: take a large zoo, open all the cages, and return after fifty years. How many species will you find? To simulate the random zoo, we take random matrices and random growth rates with \\(n\\) species, and tally the number of coexisting species over several simulations: set.seed(1) n &lt;- 5 nsim &lt;- 2000 results &lt;- tibble(simulation = 1:nsim, ncoexisting = rep(NA, nsim)) for (i in 1:nsim){ # build the matrix and vector A &lt;- build_LDstable(n) r &lt;- build_randomr(n) xstar &lt;- get_final_composition(A, r) results$ncoexisting[i] &lt;- sum(xstar &gt; 0) } pl &lt;- ggplot(data = results) + aes(x = ncoexisting) + geom_bar() + scale_x_continuous(&quot;number of species coexisting&quot;, breaks = 0:10) show(pl) # add binomial distribution tbinom &lt;- data.frame(ncoexisting = 0:n, expectation = nsim * dbinom(0:n, n, 0.5)) pl &lt;- pl + geom_point(data = tbinom, aes(x = ncoexisting, y = expectation)) show(pl) We find again that the number of coexisting species follows the binomial distribution with parameters \\(n\\) and \\(1/2\\) (i.e., exactly the same result found for non interacting species). To prove this fact, let’s begin with showing that the probability of having all species coexisting is \\(1 / 2^n\\). For this, we need \\(x^\\star = -A^{-1}r\\) to be feasible. For each possible \\(A\\) (invertible) and \\(r\\), we have that the vector \\(-r A^{-1}\\) will display a certain pattern of signs. Proving that the probability that all \\(n\\) species coexist is \\(1 / 2^n\\) amounts to proving that all sign patterns are equally probable. To this end, define the matrix \\(D_k = (-1)^{\\delta_{ik}} \\delta_{ij}\\). This is like the identity matrix, but with element \\(k\\) of the diagonal set to \\(-1\\) instead of \\(1\\). We have that: \\[ (D_k A D_k) D_k x^\\star = -D_k r \\] That is, by setting the \\(k^\\text{th}\\) element of \\(D_k\\) to -1, we flip the sign of the \\(k^\\text{th}\\) component of \\(x^\\star\\). For example: set.seed(2) A &lt;- build_LDstable(3) r &lt;- build_randomr(3) # the equilibrium is not feasible solve(A, -r) [1] -11.75292 26.47508 22.73981 # build matrix D_1 D_1 &lt;- diag(c(-1, 1, 1)) # the multiplication changes the sign of a component of the solution # making the equilibrium feasible as.numeric(solve(D_1 %*% A %*% D_1, -D_1 %*% r)) [1] 11.75292 26.47508 22.73981 Because of the symmetry assumption (i.e., we sampled all growth rates and off-diagonal elements from a distribution centered at zero), \\((D_k A D_k)\\) has the same distribution as \\(A\\), and \\(D_k r\\) the same distribution as \\(r\\). In fact, one can see that \\((D_k A D_k)\\) is also a similarity transformation, implying that the eigenvalues of \\(A\\) and \\((D_k A D_k)\\) are the same (i.e., the operation preserves stability): eigen(A)$values [1] -0.010000 -1.601076 -3.665781 eigen(D_1 %*% A %*% D_1)$values [1] -0.010000 -1.601076 -3.665781 We can repeat the operation several times, connecting each possible starting point to the feasible solution. Therefore, the probability of all species coexisting amounts to the probability of having chosen the “right” sequence of \\(D_k\\), which happens with probability \\(1 / 2^n\\). Notice that the same proof holds when the coefficients of \\(A\\) are sampled in pairs from a bivariate distribution (rather than having symmetric matrices), as long as the distribution is centered at zero, and the matrix is Lyapunov-Diagonally stable (Serván et al. (2018)). Using the same argument, one can prove that, under this parametrization, the probability of observing \\(k\\) species coexisting and \\(n -k\\) not being able to invade is exactly \\(\\binom{n}{k} \\frac{1}{2^n}\\) (Serván et al. (2018)). 2.4 Assembly and saturated equilibrium Now let’s make it more complicated: we assemble an ecological community from the ground up. At each step, we introduce a species at low abundance, starting from an empty community. We then compute the new equilibrium, completing a step of the assembly: assembly_one_step &lt;- function(x, r, A){ n &lt;- nrow(A) invader &lt;- sample(1:n, 1) x[invader] &lt;- 0.001 # introduce the invader at low abundance present &lt;- x &gt; 0 # these are the species present now # compute new equilibrium y &lt;- get_final_composition(A[present, present, drop = FALSE], r[present]) x[present] &lt;- y return(x) } Now we can take a species pool along with their parameters, and try to assemble the system until we can no longer add any more species (i.e., until we reach a saturated equilibrium): set.seed(7) n &lt;- 10 A &lt;- build_LDstable(n) r &lt;- build_randomr(n) # start with no species x &lt;- rep(0, n) # assemble for 40 steps and keep track of richness and composition ninvasions &lt;- 40 results &lt;- tibble(invasion = 1:ninvasions, richness = rep(NA, ninvasions), composition = rep(NA, ninvasions)) for (i in 1:ninvasions){ x &lt;- assembly_one_step(x, r, A) results$richness[i] &lt;- sum(x &gt; 0) results$composition[i] &lt;- paste((1:n)[x&gt;0], collapse = &quot;-&quot;) } knitr::kable(head(results)) invasion richness composition 1 0 2 0 3 1 2 4 2 1-2 5 2 1-2 6 2 1-2 pl &lt;- ggplot(results) + aes(x = invasion, y = richness, label = composition) + geom_point() + geom_line() + geom_text(hjust = 0, nudge_y = 0.25, angle = 90)+ ylim(c(0, n * 1.25)) show(pl) Now let’s roll back history and assemble again: # start with no species x &lt;- rep(0, n) # assemble for 40 steps and keep track of richness ninvasions &lt;- 40 results &lt;- tibble(invasion = 1:ninvasions, richness = rep(NA, ninvasions), composition = rep(NA, ninvasions)) for (i in 1:ninvasions){ x &lt;- assembly_one_step(x, r, A) results$richness[i] &lt;- sum(x &gt; 0) results$composition[i] &lt;- paste((1:n)[x&gt;0], collapse = &quot;-&quot;) } knitr::kable(head(results)) invasion richness composition 1 1 4 2 1 4 3 1 4 4 1 4 5 2 4-10 6 2 4-10 pl &lt;- ggplot(results) + aes(x = invasion, y = richness, label = composition) + geom_point() + geom_line() + geom_text(hjust = 0, nudge_y = 0.25, angle = 90)+ ylim(c(0, n * 1.25)) show(pl) As you can see, despite taking a different assembly history, we reach the same final composition. In fact, this is exactly what we would expect if we were to throw all species in the environment at the same time: get_final_composition(A, r) [1] 1.7588344 2.5440743 0.0000000 0.7860178 1.8730535 2.5502055 0.6961259 [8] 1.6956878 0.0000000 0.0000000 x [1] 1.7588344 2.5440743 0.0000000 0.7860178 1.8730535 2.5502055 0.6961259 [8] 1.6956878 0.0000000 0.0000000 As such, given enough time, any assembly history for a symmetric, stable matrix \\(A\\) will eventually reach the final composition represented by the saturated equilibrium (Serván and Allesina (2020)). Interestingly, this is not the case when the matrix is not symmetric. Serván et al. (2018) conjectured however that the probability of finding a system whose final composition cannot be assembled one species at a time decreases rapidly with the size of the pool, as long as \\(A\\) is Lyapunov Diagonally stable. 2.5 Network spandrels What is the network structure of the assembled community vs. that of the initial pool? Can we detect a signature of the forces acting on the community such that some species can persist, while other go extinct? To answer these questions, we start by considering a larger pool of species: set.seed(1) # initial pool A &lt;- build_LDstable(200) r &lt;- build_randomr(200) # final composition xstar &lt;- get_final_composition(A, r) A_pruned &lt;- A[xstar &gt; 0, xstar &gt; 0] r_pruned &lt;- r[xstar &gt; 0] Are the properties of matrix \\(A\\) different from those of the pruned version \\(\\tilde{A}\\)? We probe this in two ways: first, we build a graph with the strongest interactions, and plot it. plot_graph_strong &lt;- function(B, quantile = 0.75){ Bstrong &lt;- abs(B) diag(Bstrong) &lt;- 0 Bstrong[Bstrong &lt; quantile(Bstrong, quantile)] &lt;- 0 gr &lt;- graph_from_adjacency_matrix((Bstrong &gt; 0) * 1, mode = &quot;undirected&quot;) plot(gr, vertex.size=10, vertex.label=NA, layout=layout_with_fr) } plot_graph_strong(A) plot_graph_strong(A_pruned) There seems to be no special structure. A more powerful way to show the same is to plot the eigenvalues of \\(A\\) and \\(\\tilde{A}\\). For a symmetric matrix with off-diagonal elements centered at zero, the eigenvalues should follow Wigner’s semicircle law: plot_eigen &lt;- function(B){ evals &lt;- data.frame(lambda = eigen(B, only.values = TRUE, symmetric = TRUE)$values) ggplot(data = evals) + aes(x = lambda) + geom_histogram(bins = as.integer(nrow(evals) / 10), colour = &quot;black&quot;) } plot_eigen(A) plot_eigen(A_pruned) As such, the matrix of interactions before/after dynamics seem to have the same properties. However, as shown in Serván et al. (2018), the distribution of the growth rates changes in a non-trivial way: toplot &lt;- data.frame(r = r, type = &quot;before&quot;) toplot &lt;- rbind(toplot, data.frame(r = r_pruned, type = &quot;after&quot;)) ggplot(toplot) + aes(x = r, fill = type) + geom_histogram(position = &quot;dodge&quot;) But what if species were to be related to each other? For example, suppose \\(r_i = 1\\) for all species, and build a matrix in which the interactions of species \\(i + 1\\) are obtained by mutating slightly those of species \\(i\\): n &lt;- 200 r &lt;- rep(1, 200) A &lt;- matrix(0, n, n) # set first species A[1, 1] &lt;- -1 # now each species is obtained by mutating the previous one for (i in 2:n){ ai &lt;- A[i -1,] * (1 - 0.05 * runif(n)) A[i, ] &lt;- A[i, ] + ai A[, i] &lt;- A[, i] + ai A[i, i] &lt;- -1 } # make LD-stable l1 &lt;- max(eigen(A, only.values = TRUE, symmetric = TRUE)$values) if (l1 &gt; 0) diag(A) &lt;- diag(A) - l1 * 1.01 Now each species is similar to the previous one: image(A[1:n, n:1]) Perform the pruning, and plot networks and eigenvalues: xstar &lt;- get_final_composition(A, r) A_pruned &lt;- A[xstar &gt; 0, xstar &gt; 0] r_pruned &lt;- r[xstar &gt; 0] plot_graph_strong(A) plot_graph_strong(A_pruned) plot_eigen(A) plot_eigen(A_pruned) Meaning that if our matrix \\(A\\) is structured, we will recover a structured matrix after pruning, while if \\(A\\) is unstructured, we will recover an unstructured matrix. Maynard, Serván, and Allesina (2018) showed that a well-defined network structure could be a “network spandrel” (cfr. Gould and Lewontin (1979) and Solé and Valverde (2006)) arising from the way new species are introduced, rather than a “signature of stability”. References "],
["bottom-up-assembly.html", "Lecture 3 Bottom-up assembly 3.1 How many invasions? 3.2 An assembly graph 3.3 Acyclicity, accessibility 3.4 Relationship with Lyapunov function 3.5 How many assembly endpoints? 3.6 Conclusions", " Lecture 3 Bottom-up assembly 3.1 How many invasions? 3.2 An assembly graph 3.3 Acyclicity, accessibility 3.4 Relationship with Lyapunov function 3.5 How many assembly endpoints? 3.6 Conclusions "]
]
